# bot_services.py
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services import (
    data_manager,
    llm_analyzer,
    tavily_search,
)
import config
from logger import get_logger

logger = get_logger()
dp = Dispatcher()


def get_subscription_keyboard(chat_id: int):
    builder = InlineKeyboardBuilder()
    if data_manager.is_subscriber(chat_id):
        builder.button(text="‚úÖ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="unsubscribe")
    else:
        builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="subscribe")
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."""
    if not message.chat:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.")
        return
    chat_id = message.chat.id
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ä–∞–±–æ—Ç—ã —Å LLM.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ /help.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏."
    )
    await message.answer(welcome_text, reply_markup=get_subscription_keyboard(chat_id))


@dp.callback_query(lambda c: c.data == "subscribe")
async def process_callback_subscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    if not callback_query.message:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ª–∏—á–∫–µ) –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã.
    chat_id = callback_query.message.chat.id

    if data_manager.is_subscriber(chat_id):
        await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!")
    else:
        data_manager.add_subscriber(chat_id)
        await callback_query.answer("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
        await callback_query.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(chat_id)
        )


@dp.callback_query(lambda c: c.data == "unsubscribe")
async def process_callback_unsubscribe(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    if not callback_query.message:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ª–∏—á–∫–µ) –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã.
    chat_id = callback_query.message.chat.id

    if not data_manager.is_subscriber(chat_id):
        await callback_query.answer("–≠—Ç–æ—Ç —á–∞—Ç –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
    else:
        data_manager.remove_subscriber(chat_id)
        await callback_query.answer("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        await callback_query.message.edit_reply_markup(
            reply_markup=get_subscription_keyboard(chat_id)
        )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞\n"
        "/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/chat `<—Ç–µ–∫—Å—Ç>` - –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å LLM\n"
        "/web `<–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        "/analyze `<—Ç–µ–∫—Å—Ç>` - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("subscribe"))
async def cmd_subscribe(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    if not message.chat:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /subscribe –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.")
        return
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:",
        reply_markup=get_subscription_keyboard(message.chat.id),
    )


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    status_text = (
        "‚úÖ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
        "‚Ä¢ **–ë–æ—Ç:** –û–Ω–ª–∞–π–Ω\n"
        f"‚Ä¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞:** `{config.TELEGRAM_CHANNEL_ID}`\n"
        f"‚Ä¢ **LLM –º–æ–¥–µ–ª—å:** `{config.OLLAMA_MODEL}`"
    )
    await message.answer(status_text, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞."""
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    try:
        stats = data_manager.get_statistics()
        if not stats or stats.get("total_messages", 0) == 0:
            await message.answer(
                "üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return

        sentiment_counts = stats.get("sentiment_counts", {})
        hashtags = stats.get("popular_hashtags", [])
        hashtags_str = f"`{'`, `'.join(hashtags)}`" if hashtags else "–Ω–µ—Ç"

        response = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
            f"üìù **–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {stats.get('total_messages', 0)}\n"
            f"üìà **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö:** {sentiment_counts.get('–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è', 0)}\n"
            f"üìâ **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö:** {sentiment_counts.get('–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è', 0)}\n"
            f"‚ûñ **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö:** {sentiment_counts.get('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', 0)}\n\n"
            f"üè∑Ô∏è **–¢–æ–ø-10 —Ö–µ—à—Ç–µ–≥–æ–≤:**\n"
            f"{hashtags_str}"
        )
        await message.answer(response, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(Command("chat"))
async def cmd_chat(message: types.Message, command: CommandObject):
    """–û–±—â–∞–µ—Ç—Å—è —Å LLM."""
    if not command.args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/chat`")
        return
    text = command.args

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    response = await llm_analyzer.get_chat_response(text)
    await message.answer(response)


@dp.message(Command("analyze"))
async def cmd_analyze(message: types.Message, command: CommandObject):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: `/analyze <—Ç–µ–∫—Å—Ç>`"
        )
        return
    text_to_analyze = command.args

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

    analysis = await llm_analyzer.analyze_message(text_to_analyze)

    if analysis and analysis.summary:
        hashtags_str = (
            f"`{'`, `'.join(analysis.hashtags)}`" if analysis.hashtags else "–Ω–µ—Ç"
        )
        response = (
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
            f"**–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{analysis.summary}\n\n"
            f"**–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {analysis.sentiment}\n\n"
            f"**–•–µ—à—Ç–µ–≥–∏:**\n{hashtags_str}"
        )
        await progress_message.edit_text(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await progress_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )


@dp.message(Command("web"))
async def cmd_web(message: types.Message, command: CommandObject):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    if not command.args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: `/web <–∑–∞–ø—Ä–æ—Å>`")
        return
    query = command.args

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    progress_message = await message.answer(
        f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"...'
    )

    search_results = await tavily_search.search(query)

    if search_results is None:
        await progress_message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∏—Å–∫–∞."
        )
        return

    if not search_results:
        await progress_message.edit_text(
            f"ü§∑‚Äç‚ôÇÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        return

    formatted_search_results = tavily_search.format_search_results(
        search_results, query
    )
    await progress_message.edit_text(
        formatted_search_results,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )


@dp.message(F.chat.type == "private")
async def handle_non_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∫–∞–∫ —á–∞—Ç —Å LLM, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.
    """
    if message.text and not message.text.startswith("/"):
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response = await llm_analyzer.get_chat_response(message.text)
        await message.answer(response)
